from group_action import __version__, __num_of_cores__
from group_action.library import *
import copy
import subprocess
import os

def translate_left(permutation, bits):
	return [bits[permutation[k]] for k in range(len(bits))]

def generate_cyclic_group(permutation):
	identity = list(range(len(permutation)))
	cyclic_group = [identity]
	generated = copy.deepcopy(permutation)
	while(generated != identity):
		cyclic_group += [generated]
		generated = translate_left(permutation, generated)

	return cyclic_group


def main():
	print_header()

	# Create the parser
	parser = argparse.ArgumentParser(description="Build Burside's formula and compute the number of orbits generated by the action of the symmetric group Sn on the set of n-input Boolean functions B^{B^n}")

	# Add the arguments
	parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')
	parser.add_argument('--n', type=int, default=2, help='Number of inputs')
	parser.add_argument('--c', type=int, default=__num_of_cores__, help='Number of cores')

	# Parse the arguments
	args = parser.parse_args()

	# Print arguments summary
	print_arguments_summary(args, parser, __version__)

	"""
	Initialize Default value
	"""

	# number of inputs
	n=args.n

	# number of cores
	num_cores=args.c

	# build conjugacy classes
	command = f"conjugacy_classes --n {n} --c {num_cores} --j"
	result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
	if result.stderr != '':
		print(result.stderr)
	
	# get conjugacy classes data from data.json file
	fullInputFileName = "data.json"
	with open(fullInputFileName, 'r') as fid:
		data = json.load(fid)
		os.remove(fullInputFileName)

	# set under action to compute Burnside's formula
	set_under_action = list(range(2**n))

	# Generating vertices
	vertices = set_under_action

	acc = 0
	formula = ""

	# for each item of dtat
	for i, item in enumerate(data):

		if i>0:
			formula += " + "

		# get conjugacy class size and representative
		index, size, string = tuple(item.values())

		# format representative
		representative = []
		if string != '':
			representative = list(map(int,string.split(",")))
		
		# generate cyclic group <s>
		cyclic_group = generate_cyclic_group(representative)

		# edges
		edges = []

		# action of <s> on range(2**n) by translation to the left
		for permutation in cyclic_group:
			for k in set_under_action:
				bits = convert_int_to_bits(k, n)
				translated = translate_left(permutation, bits)
				translated_k = convert_bits_to_int(translated)
				edges += [[k, translated_k]]

		# Compute orbits
		orbits = find_connected_components(vertices, edges)

		# return number of orbits as the expected exponent
		exponent = len(orbits)

		# accumulate int and string
		acc += size * (1<<exponent)
		formula += f"{size}.2^{exponent}"

	# finish
	final_value = int(acc // math.factorial(n))
	final_formula = "\\frac{1}{"+f"{n}"+"!}(" + formula + ")"
	
	print(f"Number of inputs: {n}")
	print(f"Burnside's formula: {final_formula}")
	print(f"Number of orbits: {final_value}")
	
if __name__ == '__main__':
	main()
